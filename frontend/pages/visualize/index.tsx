import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/router';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Sidebar from '@/components/sidebar';
import Navbar from '@/components/navbar';
import Papa from "papaparse";
import BarChart from '@/components/charts/barChart';

export default function VisualizeData() {
  const router = useRouter();
  const backendUrl: string = process.env.NEXT_PUBLIC_API_URL!;
  const [fetchedData, setFetchedData] = useState<any>(null);
  const [isFetched, setIsFetched] = useState<boolean>(false);
  const { formId, visualization, field1, field2 } = router.query;

  const fetchData = useCallback(async () => {
    let token = null;
    if (typeof window !== "undefined") {
      token = localStorage.getItem("token");
    }

    try {
      const response = await fetch(`${backendUrl}createcsv`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: formId,
        }),
      });

      if (response.ok) {
        const csvContent = await response.text(); 
        const results = Papa.parse(csvContent, {
          header: true,
          dynamicTyping: true,
        });
        if (field1 && field2) {
          //@ts-ignore
          const labels = results.data.map((item: any) => item[field1]);
          //@ts-ignore
          const data = results.data.map((item: any) => item[field2]);
          setFetchedData({ labels: labels, datasets: [{ data: data }] });
          setIsFetched(true);
        }
      } else {
        console.error(response.status);
      }
    } catch (error) {
      console.error(error);
    }
  }, [formId, field1, field2]);

  useEffect(() => {
    if (formId && !isFetched) {
      fetchData();
      console.log(formId, visualization, field1, field2)
    }
  }, [fetchData, formId]);

  return (
    <>
      <Head>
        <title>GraphForms</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{fontFamily:"'Poppins', sans-serif"}} className='bg-white'>
        <ToastContainer/>
        <Sidebar/>
        <Navbar />
        <div id='body' className='mt-[10vh] text-center'>
        <div className='flex mb-20'>
            <div className='mx-auto w-1/2 border-t-2 border-b-2 py-10'>
              {isFetched && <BarChart data={fetchedData} />}
            </div>
        </div>
        </div>
      </div>
    </>
  )
}
