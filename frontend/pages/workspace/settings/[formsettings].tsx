import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { ToastContainer, toast } from 'react-toastify';
import 'components/sidebar'
import 'react-toastify/dist/ReactToastify.css';
import Sidebar from 'components/sidebar';
import Navbar from '@/components/navbar';

export default function FormSettings() {
  const backendUrl: string = process.env.NEXT_PUBLIC_API_URL!;
  const router = useRouter();
  const { formsettings } = router.query;
  const [fetchedData, setFetchedData] = useState<any>(null);

  async function fetchFormData() {
    let token = null
    if (typeof window !== 'undefined') {
        token = localStorage.getItem('token');
    }

    try {
      const response = await fetch(`${backendUrl}viewform`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          id: formsettings
        })
      });
      const data = await response.json();
      setFetchedData(data);
      console.log(data);
      toast.success('Form data fetched successfully!', {
        position: toast.POSITION.TOP_RIGHT
      });
    } catch (error) {
      console.error(error);
      toast.error('An error occurred while fetching form data. Please try again.', {
        position: toast.POSITION.TOP_RIGHT
      });
    }
  }

  async function createCSV() {
    let token = null;
    if (typeof window !== "undefined") {
      token = localStorage.getItem("token");
    }
  
    try {
      const response = await fetch(`${backendUrl}createcsv`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: formsettings,
        }),
      });
  
      if (response.ok) {
        const csvContent = await response.text(); 
        const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8" });
        const url = URL.createObjectURL(blob);
  
        const link = document.createElement("a");
        link.href = url;
        link.download = "form_data.csv";
        document.body.appendChild(link);
        link.click();
  
        // Clean up
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
  
        toast.success("Exported CSV!", {
          position: toast.POSITION.TOP_RIGHT,
        });
      } else {
        console.error(response.status);
        toast.error("An error occurred while exporting the CSV. Please try again.", {
          position: toast.POSITION.TOP_RIGHT,
        });
      }
    } catch (error) {
      console.error(error);
      toast.error("An error occurred while sending the request. Please try again.", {
        position: toast.POSITION.TOP_RIGHT,
      });
    }
  }

  async function deleteForm() {
    let token = null;
    if (typeof window !== "undefined") {
      token = localStorage.getItem("token");
    }
  
    try {
      const response = await fetch(`${backendUrl}deleteform`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: formsettings,
        }),
      });
  
      if (response.ok) {
        toast.success("Form deleted successfully!", {
          position: toast.POSITION.TOP_RIGHT,
        });
  
        // Navigate back to the forms list page (or wherever you want)
        router.push("/workspace");
      } else {
        console.error(response.status);
        toast.error("An error occurred while deleting the form. Please try again.", {
          position: toast.POSITION.TOP_RIGHT,
        });
      }
    } catch (error) {
      console.error(error);
      toast.error("An error occurred while sending the request. Please try again.", {
        position: toast.POSITION.TOP_RIGHT,
      });
    }
  }
  
  
  

  useEffect(() => {
    console.log(formsettings)
    if (formsettings) {
      fetchFormData();
    }
  }, [formsettings]);

  return (
    <>
      <Head>
        <title>GraphForms</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div style={{fontFamily:"'Poppins', sans-serif"}} className='bg-white'>
        <ToastContainer/>
        <Sidebar/>
        <Navbar />
        <div id='body' className='mt-[10vh] text-center'>
          {fetchedData && (
            <div>
              <p className='text-center font-medium text-[#444444] mb-4'>Settings for form:</p>
              <h1 className='text-5xl font-semibold'>{fetchedData.name}</h1>
              <div className='flex'>
                <div className='mx-auto w-1/2 border-b-4 mb-[8px]'></div>
              </div>
              <div className='flex'>
  <div className='flex mx-auto w-1/2'>
    <div className='mx-auto'>
      <p className='text-[#444444] text-left font-medium'>Export your data and use it for spreadsheets, machine learning models, and more.</p>
      <button onClick={createCSV} className="bg-black text-white font-bold py-2 px-4 rounded mt-2 mb-5">
        Create CSV
      </button>
    </div>
    <div className='mx-auto ml-auto'>
      <p className='text-[#444444] font-medium text-left'>Permanently delete your form.</p>
      <button onClick={deleteForm} className='bg-red-600 text-white font-bold py-2 px-4 rounded mt-2'>
        Delete Form
      </button>
    </div>
  </div>
</div>

            </div>
          )}
        </div>
      </div>
    </>
  )
}
